// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Context;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(TourmateContext))]
    [Migration("20250421070636_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__F267251E65A5A5B9");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Account__AB6E616407035DCA")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.AccountMembership", b =>
                {
                    b.Property<int>("AccountMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accountMembershipId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountMembershipId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<int>("MembershipPackageId")
                        .HasColumnType("int")
                        .HasColumnName("membershipPackageId");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.HasKey("AccountMembershipId")
                        .HasName("PK__AccountM__1C86D62900EA66B9");

                    b.HasIndex("AccountId");

                    b.HasIndex("MembershipPackageId");

                    b.ToTable("AccountMembership", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.ActiveArea", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("areaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"));

                    b.Property<string>("AreaContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("areaContent");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("areaName");

                    b.Property<string>("AreaSubtitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("areaSubtitle");

                    b.Property<string>("AreaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("areaTitle");

                    b.Property<string>("BannerImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bannerImg");

                    b.HasKey("AreaId")
                        .HasName("PK__ActiveAr__52936C57F06B6800");

                    b.ToTable("ActiveArea", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bidId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("status");

                    b.Property<int>("TourBidId")
                        .HasColumnType("int")
                        .HasColumnName("tourBidId");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int")
                        .HasColumnName("tourGuideId");

                    b.HasKey("BidId")
                        .HasName("PK__Bid__48E98F58BE5BA5ED");

                    b.HasIndex("TourBidId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("Bid", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("media");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__FA0AA72D9C011519");

                    b.HasIndex("AccountId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.BlogComment", b =>
                {
                    b.Property<int>("BlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogCommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogCommentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("BlogCommentId")
                        .HasName("PK__BlogComm__555BBA7E72120252");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogComment", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.BlogCommentReply", b =>
                {
                    b.Property<int>("BlogCommentReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogCommentReplyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogCommentReplyId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<int>("BlogCommentId")
                        .HasColumnType("int")
                        .HasColumnName("blogCommentId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("BlogCommentReplyId")
                        .HasName("PK__BlogComm__BE494851D1A07A0E");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogCommentId");

                    b.ToTable("BlogCommentReply", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.BlogLike", b =>
                {
                    b.Property<int>("BlogLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogLikeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogLikeId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    b.HasKey("BlogLikeId")
                        .HasName("PK__BlogLike__E52253F94FC26446");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogLike", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__23CAF1D8903ECE86");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullName");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit")
                        .HasColumnName("isProcessed");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("ContactId")
                        .HasName("PK__Contact__7121FD3547A83250");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Conversation", b =>
                {
                    b.Property<int>("ConersationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conersationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConersationId"));

                    b.Property<int>("Account1Id")
                        .HasColumnType("int")
                        .HasColumnName("account1Id");

                    b.Property<int>("Account2Id")
                        .HasColumnType("int")
                        .HasColumnName("account2Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.HasKey("ConersationId")
                        .HasName("PK__Conversa__6952075FAC24F669");

                    b.HasIndex("Account1Id");

                    b.HasIndex("Account2Id");

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__B611CB7D37AFB881");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "Phone" }, "UQ__Customer__B43B145F0C731CC2")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Cvapplication", b =>
                {
                    b.Property<int>("CvApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cvApplicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CvApplicationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("link");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("CvApplicationId")
                        .HasName("PK__CVApplic__F753C8A2C60BA95C");

                    b.ToTable("CVApplication", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int")
                        .HasColumnName("tourGuideId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__2613FD24C69BCF34");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoiceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("areaId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("PeopleAmount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("peopleAmount");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("TourDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tourDesc");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int")
                        .HasColumnName("tourGuideId");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__1252416C1CC20425");

                    b.HasIndex("AreaId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.MembershipPackage", b =>
                {
                    b.Property<int>("MembershipPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("membershipPackageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipPackageId"));

                    b.Property<string>("BenefitDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("benefitDesc");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration")
                        .HasComment("in day");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.HasKey("MembershipPackageId")
                        .HasName("PK__Membersh__FC12A45490CC784A");

                    b.ToTable("MembershipPackage", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("messageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversationId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit")
                        .HasColumnName("isEdited");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("isRead");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("messageText");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("messageType");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("datetime")
                        .HasColumnName("sendAt");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("senderId");

                    b.HasKey("MessageId")
                        .HasName("PK__Message__4808B993E22CC7F8");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("newsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"));

                    b.Property<string>("BannerImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bannerImg");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("NewsId")
                        .HasName("PK__News__5218041EEEAAB71A");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Repositories.Models.NewsCategory", b =>
                {
                    b.Property<int>("NewsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("newsCategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<int>("NewsId")
                        .HasColumnType("int")
                        .HasColumnName("newsId");

                    b.HasKey("NewsCategoryId")
                        .HasName("PK__NewsCate__33073C1715BC2B54");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsCategory", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.NewsComment", b =>
                {
                    b.Property<int>("NewsCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("newsCommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsCommentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("NewsId")
                        .HasColumnType("int")
                        .HasColumnName("newsId");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("NewsCommentId")
                        .HasName("PK__NewsComm__C49DE04575199369");

                    b.HasIndex("AccountId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsComment", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.NewsReply", b =>
                {
                    b.Property<int>("NewsReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("newsReplyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsReplyId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("ReplyFor")
                        .HasColumnType("int")
                        .HasColumnName("replyFor");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("NewsReplyId")
                        .HasName("PK__NewsRepl__DB1429933D150C66");

                    b.HasIndex("AccountId");

                    b.HasIndex("ReplyFor");

                    b.ToTable("NewsReply", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime")
                        .HasColumnName("completeDate");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceId");

                    b.Property<int?>("MembershipPackageId")
                        .HasColumnType("int")
                        .HasColumnName("membershipPackageId");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("paymentMethod")
                        .HasComment("momo/ vnpay");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentType")
                        .HasComment("membership / invoice");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__A0D9EFC638C72549");

                    b.HasIndex("AccountId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MembershipPackageId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expireAt");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit")
                        .HasColumnName("isRevoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK__RefreshT__3213E83F144396AD");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__CD98462A1DFD6468");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.SystemRevenue", b =>
                {
                    b.Property<int>("SystemRevenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("systemRevenueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemRevenueId"));

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("SystemRevenueId")
                        .HasName("PK__SystemRe__EED5C17D12AE0E85");

                    b.HasIndex("PaymentId");

                    b.ToTable("SystemRevenue", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.TourBid", b =>
                {
                    b.Property<int>("TourBid1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tourBid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourBid1"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<float?>("MaxPrice")
                        .HasColumnType("real")
                        .HasColumnName("maxPrice");

                    b.Property<int>("PlaceRequested")
                        .HasColumnType("int")
                        .HasColumnName("placeRequested");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.HasKey("TourBid1")
                        .HasName("PK__TourBid__6359293A7C00C65F");

                    b.HasIndex("AccountId");

                    b.HasIndex("PlaceRequested");

                    b.ToTable("TourBid", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.TourGuide", b =>
                {
                    b.Property<int>("TourGuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tourGuideId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourGuideId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.HasKey("TourGuideId")
                        .HasName("PK__TourGuid__D466D4A2812B0FFF");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "Phone" }, "UQ__TourGuid__B43B145FCB2C42A1")
                        .IsUnique();

                    b.ToTable("TourGuide", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.TourGuideDesc", b =>
                {
                    b.Property<int>("TourGuideDescId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tourGuideDescId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourGuideDescId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("areaId");

                    b.Property<string>("Company")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("company");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int")
                        .HasColumnName("tourGuideId");

                    b.Property<int?>("YearOfExperience")
                        .HasColumnType("int")
                        .HasColumnName("yearOfExperience");

                    b.HasKey("TourGuideDescId")
                        .HasName("PK__TourGuid__5D853B513094440C");

                    b.HasIndex("AreaId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TourGuideDesc", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.TourGuideRevenue", b =>
                {
                    b.Property<int>("TourGuideRevenue1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tourGuideRevenue");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourGuideRevenue1"));

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int")
                        .HasColumnName("tourGuideId");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("TourGuideRevenue1")
                        .HasName("PK__TourGuid__049615064CBEB05C");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TourGuideRevenue", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.TourService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("serviceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdDate");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("duration");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("serviceName");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int")
                        .HasColumnName("tourGuideId");

                    b.HasKey("ServiceId")
                        .HasName("PK__TourServ__455070DF9BE25FB6");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TourService", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Account", b =>
                {
                    b.HasOne("Repositories.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FKAccount946763");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repositories.Models.AccountMembership", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("AccountMemberships")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKAccountMem798455");

                    b.HasOne("Repositories.Models.MembershipPackage", "MembershipPackage")
                        .WithMany("AccountMemberships")
                        .HasForeignKey("MembershipPackageId")
                        .IsRequired()
                        .HasConstraintName("FKAccountMem974204");

                    b.Navigation("Account");

                    b.Navigation("MembershipPackage");
                });

            modelBuilder.Entity("Repositories.Models.Bid", b =>
                {
                    b.HasOne("Repositories.Models.TourBid", "TourBid")
                        .WithMany("Bids")
                        .HasForeignKey("TourBidId")
                        .IsRequired()
                        .HasConstraintName("FKBid659809");

                    b.HasOne("Repositories.Models.TourGuide", "TourGuide")
                        .WithMany("Bids")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FKBid623728");

                    b.Navigation("TourBid");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Repositories.Models.Blog", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("Blogs")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKBlog316425");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Models.BlogComment", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("BlogComments")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKBlogCommen856142");

                    b.HasOne("Repositories.Models.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("FKBlogCommen331450");

                    b.Navigation("Account");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Repositories.Models.BlogCommentReply", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("BlogCommentReplies")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKBlogCommen891262");

                    b.HasOne("Repositories.Models.BlogComment", "BlogComment")
                        .WithMany("BlogCommentReplies")
                        .HasForeignKey("BlogCommentId")
                        .IsRequired()
                        .HasConstraintName("FKBlogCommen494206");

                    b.Navigation("Account");

                    b.Navigation("BlogComment");
                });

            modelBuilder.Entity("Repositories.Models.BlogLike", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("BlogLikes")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKBlogLike84009");

                    b.HasOne("Repositories.Models.Blog", "Blog")
                        .WithMany("BlogLikes")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("FKBlogLike559316");

                    b.Navigation("Account");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Repositories.Models.Conversation", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account1")
                        .WithMany("ConversationAccount1s")
                        .HasForeignKey("Account1Id")
                        .IsRequired()
                        .HasConstraintName("FKConversati600223");

                    b.HasOne("Repositories.Models.Account", "Account2")
                        .WithMany("ConversationAccount2s")
                        .HasForeignKey("Account2Id")
                        .IsRequired()
                        .HasConstraintName("FKConversati599262");

                    b.Navigation("Account1");

                    b.Navigation("Account2");
                });

            modelBuilder.Entity("Repositories.Models.Customer", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer62882");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Models.Feedback", b =>
                {
                    b.HasOne("Repositories.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKFeedback561761");

                    b.HasOne("Repositories.Models.TourGuide", "TourGuide")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FKFeedback699513");

                    b.Navigation("Customer");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Repositories.Models.Invoice", b =>
                {
                    b.HasOne("Repositories.Models.ActiveArea", "Area")
                        .WithMany("Invoices")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FKInvoice643155");

                    b.HasOne("Repositories.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKInvoice303466");

                    b.HasOne("Repositories.Models.TourGuide", "TourGuide")
                        .WithMany("Invoices")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FKInvoice441218");

                    b.Navigation("Area");

                    b.Navigation("Customer");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Repositories.Models.Message", b =>
                {
                    b.HasOne("Repositories.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FKMessage780995");

                    b.HasOne("Repositories.Models.Account", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FKMessage122587");

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Repositories.Models.NewsCategory", b =>
                {
                    b.HasOne("Repositories.Models.Category", "Category")
                        .WithMany("NewsCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FKNewsCatego674681");

                    b.HasOne("Repositories.Models.News", "News")
                        .WithMany("NewsCategories")
                        .HasForeignKey("NewsId")
                        .IsRequired()
                        .HasConstraintName("FKNewsCatego154935");

                    b.Navigation("Category");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Repositories.Models.NewsComment", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("NewsComments")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKNewsCommen23725");

                    b.HasOne("Repositories.Models.News", "News")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsId")
                        .IsRequired()
                        .HasConstraintName("FKNewsCommen520782");

                    b.Navigation("Account");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Repositories.Models.NewsReply", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("NewsReplies")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKNewsReply112342");

                    b.HasOne("Repositories.Models.NewsComment", "ReplyForNavigation")
                        .WithMany("NewsReplies")
                        .HasForeignKey("ReplyFor")
                        .IsRequired()
                        .HasConstraintName("FKNewsReply469429");

                    b.Navigation("Account");

                    b.Navigation("ReplyForNavigation");
                });

            modelBuilder.Entity("Repositories.Models.Payment", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKPayment215705");

                    b.HasOne("Repositories.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FKPayment939394");

                    b.HasOne("Repositories.Models.MembershipPackage", "MembershipPackage")
                        .WithMany("Payments")
                        .HasForeignKey("MembershipPackageId")
                        .HasConstraintName("FKPayment16775");

                    b.Navigation("Account");

                    b.Navigation("Invoice");

                    b.Navigation("MembershipPackage");
                });

            modelBuilder.Entity("Repositories.Models.RefreshToken", b =>
                {
                    b.HasOne("Repositories.Models.Account", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FKRefreshTok914650");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Models.SystemRevenue", b =>
                {
                    b.HasOne("Repositories.Models.Payment", "Payment")
                        .WithMany("SystemRevenues")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FKSystemReve708422");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Repositories.Models.TourBid", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("TourBids")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKTourBid491964");

                    b.HasOne("Repositories.Models.ActiveArea", "PlaceRequestedNavigation")
                        .WithMany("TourBids")
                        .HasForeignKey("PlaceRequested")
                        .IsRequired()
                        .HasConstraintName("FKTourBid682696");

                    b.Navigation("Account");

                    b.Navigation("PlaceRequestedNavigation");
                });

            modelBuilder.Entity("Repositories.Models.TourGuide", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("TourGuides")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKTourGuide28174");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Models.TourGuideDesc", b =>
                {
                    b.HasOne("Repositories.Models.ActiveArea", "Area")
                        .WithMany("TourGuideDescs")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FKTourGuideD540188");

                    b.HasOne("Repositories.Models.TourGuide", "TourGuide")
                        .WithMany("TourGuideDescs")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FKTourGuideD742125");

                    b.Navigation("Area");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Repositories.Models.TourGuideRevenue", b =>
                {
                    b.HasOne("Repositories.Models.Payment", "Payment")
                        .WithMany("TourGuideRevenues")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FKTourGuideR890450");

                    b.HasOne("Repositories.Models.TourGuide", "TourGuide")
                        .WithMany("TourGuideRevenues")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FKTourGuideR267432");

                    b.Navigation("Payment");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Repositories.Models.TourService", b =>
                {
                    b.HasOne("Repositories.Models.TourGuide", "TourGuide")
                        .WithMany("TourServices")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FKTourServic281225");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Repositories.Models.Account", b =>
                {
                    b.Navigation("AccountMemberships");

                    b.Navigation("BlogCommentReplies");

                    b.Navigation("BlogComments");

                    b.Navigation("BlogLikes");

                    b.Navigation("Blogs");

                    b.Navigation("ConversationAccount1s");

                    b.Navigation("ConversationAccount2s");

                    b.Navigation("Customers");

                    b.Navigation("Messages");

                    b.Navigation("NewsComments");

                    b.Navigation("NewsReplies");

                    b.Navigation("Payments");

                    b.Navigation("RefreshTokens");

                    b.Navigation("TourBids");

                    b.Navigation("TourGuides");
                });

            modelBuilder.Entity("Repositories.Models.ActiveArea", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("TourBids");

                    b.Navigation("TourGuideDescs");
                });

            modelBuilder.Entity("Repositories.Models.Blog", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogLikes");
                });

            modelBuilder.Entity("Repositories.Models.BlogComment", b =>
                {
                    b.Navigation("BlogCommentReplies");
                });

            modelBuilder.Entity("Repositories.Models.Category", b =>
                {
                    b.Navigation("NewsCategories");
                });

            modelBuilder.Entity("Repositories.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Repositories.Models.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Repositories.Models.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Repositories.Models.MembershipPackage", b =>
                {
                    b.Navigation("AccountMemberships");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Repositories.Models.News", b =>
                {
                    b.Navigation("NewsCategories");

                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("Repositories.Models.NewsComment", b =>
                {
                    b.Navigation("NewsReplies");
                });

            modelBuilder.Entity("Repositories.Models.Payment", b =>
                {
                    b.Navigation("SystemRevenues");

                    b.Navigation("TourGuideRevenues");
                });

            modelBuilder.Entity("Repositories.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Repositories.Models.TourBid", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("Repositories.Models.TourGuide", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("TourGuideDescs");

                    b.Navigation("TourGuideRevenues");

                    b.Navigation("TourServices");
                });
#pragma warning restore 612, 618
        }
    }
}
